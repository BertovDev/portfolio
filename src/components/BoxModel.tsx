/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/box1.glb --transform 
Files: public/box1.glb [2.68MB] > /home/bautistadev/Desktop/projects/portfolio/box1-transformed.glb [209.63KB] (92%)
*/

import React, { useState } from "react";
import { useGLTF, Outlines } from "@react-three/drei";
import { useControls } from "leva";
import useCameraStore from "@/Utils";

export function BoxModel() {
  const { rotationB, positionB } = useControls({
    positionB: [-0.065, 0, 0.443],
    rotationB: [-Math.PI / 2, 0, 2.22],
  });

  const [hover, setHover] = useState(false);

  const { setCameraZoomed, isTransitioning, setTransitioning } =
    useCameraStore();

  const hoverBox = () => {
    if (isTransitioning) return;
    setHover(true);

    document.body.style.cursor = "pointer";
    setCameraZoomed(true);
  };

  const hoverLeave = () => {
    if (isTransitioning) return;
    setHover(false);

    document.body.style.cursor = "grab";
    setCameraZoomed(false);
  };

  const { nodes, materials } = useGLTF("box1.glb");
  return (
    <group
      dispose={null}
      onPointerOver={() => hoverBox()}
      onPointerLeave={() => hoverLeave()}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["Box_1-b_Boxes_0"].geometry}
        scale={10}
        material={materials.Boxes}
        position={positionB}
        rotation={rotationB}
      />
      <Outlines thickness={0.5} color="white" />
    </group>
  );
}

useGLTF.preload("box1.glb");
