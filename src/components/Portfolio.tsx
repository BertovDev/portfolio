/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/portfolio.glb 
*/

import React, { useState } from "react";
import { Outlines, useGLTF } from "@react-three/drei";
import { useControls } from "leva";
import { useCameraStore, useSectionStore } from "@/utils/Utils";

import PorfolioGLTF from "@/types/model";
import Annotation from "./Annotation";
import { DoubleSide } from "three";

export function PorfolioModel() {
  const { rota, posa } = useControls({
    posa: [4.2, 0, -2.3],
    rota: [0, 5.4, 0],
  });

  const [hover, setHover] = useState<boolean>(false);
  const [hoverShovel, setHoverShovel] = useState<boolean>(false);
  const [hoverCard, setHoverCard] = useState<boolean>(false);
  const [hoverVinyl, setHoverVinyl] = useState<boolean>(false);

  const { setCameraZoomed, isTransitioning } = useCameraStore();
  const { setSectionClicked } = useSectionStore();

  const hoverBox = () => {
    if (isTransitioning) return;
    setHover(true);

    document.body.style.cursor = "pointer";
    setCameraZoomed(true);
  };

  const hoverLeave = () => {
    if (isTransitioning) return;
    setHover(false);

    document.body.style.cursor = "grab";
    setCameraZoomed(false);
  };

  const { nodes, materials } = useGLTF(
    "/portfolio.glb"
  ) as unknown as PorfolioGLTF;
  return (
    <group
      dispose={null}
      scale={11}
      position={[4, 0, -1.7]}
      rotation={[0, 5.4, 0]}
      onPointerOver={() => hoverBox()}
      onPointerMissed={() => hoverLeave()}
    >
      <group
        position={[-0.02, 0.018, 0.471]}
        rotation={[-Math.PI, 0, 0]}
        scale={0.0038}
      >
        <group
          position={[-12.118, 6.028, 5.83]}
          rotation={[1.698, 0.352, 0.692]}
          onPointerEnter={() => setHoverCard(true)}
          onPointerLeave={() => setHoverCard(false)}
        >
          <mesh
            geometry={nodes.pPlane3_lambert4_0.geometry}
            material={materials.lambert4}
            position={[-8.273, 4.847, -0.877]}
            rotation={[1.231, 0.197, 0.237]}
            scale={[1, 1, 1.044]}
          >
            {hoverCard && <Outlines thickness={1.1} color="red" />}
          </mesh>
        </group>
      </group>
      <group
        position={[0.06, -0.117, 0.51]}
        rotation={[-3.135, 0.523, 3.132]}
        scale={0.008}
        onPointerEnter={() => setHoverShovel(true)}
        onPointerLeave={() => setHoverShovel(false)}
        onClick={() => setSectionClicked("Work", true)}
      >
        <group position={[1.237, 0.03, -3.857]}>
          <mesh
            geometry={nodes.Object_10.geometry}
            material={materials.VoxMaterial_250}
          >
            {hoverShovel && <Outlines thickness={1.1} color="red" />}
          </mesh>
          <mesh
            geometry={nodes.Object_11.geometry}
            material={materials.VoxMaterial_251}
          >
            {hoverShovel && <Outlines thickness={1.1} color="red" />}
          </mesh>
          <mesh
            geometry={nodes.Object_12.geometry}
            material={materials.VoxMaterial_252}
          >
            {hoverShovel && <Outlines thickness={1.1} color="red" />}
          </mesh>

          <mesh
            geometry={nodes.Object_5.geometry}
            material={materials.VoxMaterial_225}
          >
            {hoverShovel && <Outlines thickness={1.1} color="red" />}
          </mesh>
          <mesh
            geometry={nodes.Object_6.geometry}
            material={materials.VoxMaterial_227}
          >
            {hoverShovel && <Outlines thickness={1.1} color="red" />}
          </mesh>
          <mesh
            geometry={nodes.Object_7.geometry}
            material={materials.VoxMaterial_229}
          >
            {hoverShovel && <Outlines thickness={1.1} color="red" />}
          </mesh>
          <mesh
            geometry={nodes.Object_8.geometry}
            material={materials.VoxMaterial_231}
          >
            {hoverShovel && <Outlines thickness={1.1} color="red" />}
          </mesh>
          <mesh
            geometry={nodes.Object_9.geometry}
            material={materials.VoxMaterial_249}
          >
            {hoverShovel && <Outlines thickness={1.1} color="red" />}
          </mesh>
          {hoverShovel && (
            <Annotation
              position={[22, 18, 11.5]}
              rotation={[0, 173.6, 0]}
              scale={10}
            >
              <span>Work</span>
            </Annotation>
          )}
        </group>
      </group>
      <mesh
        geometry={nodes["Box_1-b_Boxes_0"].geometry}
        material={materials.Boxes}
        position={[-0.065, 0, 0.443]}
        rotation={[-Math.PI / 2, 0, 0]}
        castShadow
        receiveShadow
      />

      <group>
        <mesh
          position={[-0.061, 0.079, 0.319]}
          rotation={[-0.17, 3.14, 0]}
          onPointerEnter={() => setHoverVinyl(true)}
          onPointerLeave={() => setHoverVinyl(false)}
        >
          <planeGeometry args={[0.15, 0.15]} />
          <meshStandardMaterial color={"black"} side={DoubleSide} />
        </mesh>
        {hoverVinyl && (
          <Annotation scale={0.1} position={[-0.07, 0.15, 0.27]}>
            <span>Projects</span>
          </Annotation>
        )}
      </group>

      <mesh
        position={[-0.055, 0.079, 0.33]}
        rotation={[-0.26, 3.14, 0]}
        scale={0.99}
        onPointerEnter={() => setHoverVinyl(true)}
        onPointerLeave={() => setHoverVinyl(false)}
        onClick={() => {
          setSectionClicked("Projects", true);
        }}
      >
        <planeGeometry args={[0.15, 0.15]} />
        <meshStandardMaterial color={"white"} side={DoubleSide} />
        {hoverVinyl && (
          <Outlines thickness={0.5} color="red" angle={0} scale={1.02} />
        )}
      </mesh>
    </group>
  );
}

useGLTF.preload("/portfolio.glb");
